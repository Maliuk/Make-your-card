/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Correct the line height in all browsers.
 * 3. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
/* Document
   ========================================================================== */
@import url(../../fonts/TheMixArab/styles.css);
@import url("https://fonts.googleapis.com/css?family=Dancing+Script|Gloria+Hallelujah|Lemonada|Mirza|Reem+Kufi");
html {
  font-family: sans-serif;
  /* 1 */
  line-height: 1.15;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 3 */
  -webkit-text-size-adjust: 100%;
  /* 3 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none; }

.preloader {
  opacity: 1;
  visibility: visible;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 20;
  height: 100%;
  width: 100%;
  background-color: white;
  border-radius: 6px;
  -webkit-transition: all 0.4s ease;
  -moz-transition: all 0.4s ease;
  transition: all 0.4s ease; }
  .preloader.disable {
    opacity: 0;
    visibility: hidden; }

.sk-circle {
  margin: 100px auto;
  width: 40px;
  height: 40px;
  position: relative; }

.sk-circle .sk-child {
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0; }

.sk-circle .sk-child:before {
  content: '';
  display: block;
  margin: 0 auto;
  width: 15%;
  height: 15%;
  background-color: #333;
  border-radius: 100%;
  -webkit-animation: sk-circleBounceDelay 1.2s infinite ease-in-out both;
  animation: sk-circleBounceDelay 1.2s infinite ease-in-out both; }

.sk-circle .sk-circle2 {
  -webkit-transform: rotate(30deg);
  -ms-transform: rotate(30deg);
  transform: rotate(30deg); }

.sk-circle .sk-circle3 {
  -webkit-transform: rotate(60deg);
  -ms-transform: rotate(60deg);
  transform: rotate(60deg); }

.sk-circle .sk-circle4 {
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg); }

.sk-circle .sk-circle5 {
  -webkit-transform: rotate(120deg);
  -ms-transform: rotate(120deg);
  transform: rotate(120deg); }

.sk-circle .sk-circle6 {
  -webkit-transform: rotate(150deg);
  -ms-transform: rotate(150deg);
  transform: rotate(150deg); }

.sk-circle .sk-circle7 {
  -webkit-transform: rotate(180deg);
  -ms-transform: rotate(180deg);
  transform: rotate(180deg); }

.sk-circle .sk-circle8 {
  -webkit-transform: rotate(210deg);
  -ms-transform: rotate(210deg);
  transform: rotate(210deg); }

.sk-circle .sk-circle9 {
  -webkit-transform: rotate(240deg);
  -ms-transform: rotate(240deg);
  transform: rotate(240deg); }

.sk-circle .sk-circle10 {
  -webkit-transform: rotate(270deg);
  -ms-transform: rotate(270deg);
  transform: rotate(270deg); }

.sk-circle .sk-circle11 {
  -webkit-transform: rotate(300deg);
  -ms-transform: rotate(300deg);
  transform: rotate(300deg); }

.sk-circle .sk-circle12 {
  -webkit-transform: rotate(330deg);
  -ms-transform: rotate(330deg);
  transform: rotate(330deg); }

.sk-circle .sk-circle2:before {
  -webkit-animation-delay: -1.1s;
  animation-delay: -1.1s; }

.sk-circle .sk-circle3:before {
  -webkit-animation-delay: -1s;
  animation-delay: -1s; }

.sk-circle .sk-circle4:before {
  -webkit-animation-delay: -0.9s;
  animation-delay: -0.9s; }

.sk-circle .sk-circle5:before {
  -webkit-animation-delay: -0.8s;
  animation-delay: -0.8s; }

.sk-circle .sk-circle6:before {
  -webkit-animation-delay: -0.7s;
  animation-delay: -0.7s; }

.sk-circle .sk-circle7:before {
  -webkit-animation-delay: -0.6s;
  animation-delay: -0.6s; }

.sk-circle .sk-circle8:before {
  -webkit-animation-delay: -0.5s;
  animation-delay: -0.5s; }

.sk-circle .sk-circle9:before {
  -webkit-animation-delay: -0.4s;
  animation-delay: -0.4s; }

.sk-circle .sk-circle10:before {
  -webkit-animation-delay: -0.3s;
  animation-delay: -0.3s; }

.sk-circle .sk-circle11:before {
  -webkit-animation-delay: -0.2s;
  animation-delay: -0.2s; }

.sk-circle .sk-circle12:before {
  -webkit-animation-delay: -0.1s;
  animation-delay: -0.1s; }

@-webkit-keyframes sk-circleBounceDelay {
  0%, 80%, 100% {
    -webkit-transform: scale(0);
    transform: scale(0); }
  40% {
    -webkit-transform: scale(1);
    transform: scale(1); } }

@keyframes sk-circleBounceDelay {
  0%, 80%, 100% {
    -webkit-transform: scale(0);
    transform: scale(0); }
  40% {
    -webkit-transform: scale(1);
    transform: scale(1); } }

/*================================================
MAIN STYLES
================================================*/
body, html {
  font-family: 'TheMixArab'; }
  body, body html, html, html html {
    overflow: hidden; }

p {
  font-size: 12px;
  color: #2e3192; }

.container {
  max-width: 737px;
  margin: 0 auto;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

.title {
  font-weight: normal;
  text-align: center;
  font-size: 25px;
  color: #1b1e88;
  margin: 0;
  padding: 30px 0; }

.text-center {
  text-align: center; }

.bg-gray {
  background-color: #ebebeb; }

.line-title {
  position: relative;
  color: #b7b7b7;
  font-weight: normal;
  font-size: 16px;
  text-align: center;
  padding: 12px 0;
  margin: 0; }
  .line-title::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 0;
    border-bottom: 1px solid #cccccc; }
  .line-title span {
    position: relative;
    z-index: 5;
    display: inline-block;
    height: 100%;
    background-color: #ebebeb;
    min-width: 120px;
    padding: 0 15px; }

.btn {
  display: inline-block;
  color: #fff;
  border-radius: 6px;
  background-color: #1885cf;
  text-decoration: none;
  padding: 6px 15px;
  /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#47aaf0+0,0979c4+100 */
  background: #47aaf0;
  /* Old browsers */
  background: -moz-linear-gradient(top, #47aaf0 0%, #0979c4 100%);
  /* FF3.6-15 */
  background: -webkit-linear-gradient(top, #47aaf0 0%, #0979c4 100%);
  /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(to bottom, #47aaf0 0%, #0979c4 100%);
  /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#47aaf0', endColorstr='#0979c4',GradientType=0 );
  /* IE6-9 */
  -webkit-transition: all 0.3s ease;
  -moz-transition: all 0.3s ease;
  transition: all 0.3s ease; }
  .btn:hover {
    /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#0979c4+0,47aaf0+100 */
    background: #0979c4;
    /* Old browsers */
    background: -moz-linear-gradient(top, #0979c4 0%, #47aaf0 100%);
    /* FF3.6-15 */
    background: -webkit-linear-gradient(top, #0979c4 0%, #47aaf0 100%);
    /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to bottom, #0979c4 0%, #47aaf0 100%);
    /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#0979c4', endColorstr='#47aaf0',GradientType=0 );
    /* IE6-9 */ }
  .btn i.icon {
    display: inline-block; }

[class*="icon-"] {
  position: relative;
  height: 20px;
  width: 20px;
  display: inline-block;
  background-repeat: no-repeat;
  background-position: center;
  vertical-align: middle; }

.icon-download {
  background-image: url("../img/icon-download.png"); }

.icon-chat {
  height: 20px;
  width: 30px;
  background-image: url("../img/icon-chat.png"); }

.clearfix::after {
  content: "";
  display: table;
  clear: both; }

#page-wrap {
  height: 100vh;
  width: auto;
  background-image: url("../img/bg.jpg");
  background-repeat: repeat;
  background-position: center;
  padding: 0 15px; }

header {
  position: relative;
  height: 80px; }

#logo {
  position: absolute;
  top: 0;
  right: 0; }

#hashtag {
  position: absolute;
  top: 50%;
  left: 0;
  -webkit-transform: translate(0, -50%);
  -moz-transform: translate(0, -50%);
  -ms-transform: translate(0, -50%);
  -o-transform: translate(0, -50%);
  transform: translate(0, -50%);
  font-size: 30px;
  color: #fff;
  text-shadow: 4px 4px 0 #007db5, -2px -2px 0 #007db5, 2px -2px 0 #007db5, -2px 2px 0 #007db5, 2px 2px 0 #007db5; }

#content {
  position: relative;
  display: block;
  overflow: hidden;
  padding: 0 15px 15px;
  background-color: #fff;
  border-radius: 6px;
  height: calc(100vh - 80px - 40px); }
  @media (max-width: 767px) {
    #content {
      height: calc(100vh - 80px - 15px); } }

/*================================================
IMAGE ITEMS
================================================*/
.items {
  height: calc(100% - 88px); }
  .items ul {
    position: relative;
    list-style: none;
    margin: 0;
    font-size: 0;
    padding: 9px 0px; }
    .items ul li {
      position: relative;
      width: 25%;
      display: inline-block;
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
      margin-bottom: 60px;
      z-index: 5; }
      .items ul li::after {
        content: "";
        position: absolute;
        top: 50%;
        right: 0;
        -webkit-transform: translate(0, -50%);
        -moz-transform: translate(0, -50%);
        -ms-transform: translate(0, -50%);
        -o-transform: translate(0, -50%);
        transform: translate(0, -50%);
        height: 67px;
        width: 1px;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        border-right: 1px solid #d6d6d6; }
      .items ul li:nth-child(4n+4)::after, .items ul li:last-child::after {
        display: none; }
      @media (max-width: 767px) {
        .items ul li {
          width: 50%; }
          .items ul li:nth-child(4n+4)::after, .items ul li:last-child::after {
            display: block; }
          .items ul li:nth-child(2n+2)::after, .items ul li:last-child::after {
            display: none; } }
      @media (max-width: 400px) {
        .items ul li {
          width: 100%; }
          .items ul li::after {
            display: none; } }

.item-frame, .item-image {
  border: 1px solid #d6d6d6;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  overflow: hidden; }

.item-frame {
  height: 90px;
  width: 110px;
  margin: 0 auto;
  padding: 5px;
  background: #fff;
  cursor: pointer;
  box-shadow: 0px 13px 20px -20px black;
  -webkit-transform: rotate(0deg) scale(1);
  -moz-transform: rotate(0deg) scale(1);
  -ms-transform: rotate(0deg) scale(1);
  -o-transform: rotate(0deg) scale(1);
  transform: rotate(0deg) scale(1);
  -webkit-transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  -moz-transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275); }
  .item-frame:hover {
    -webkit-transform: rotate(-6deg) scale(1.1);
    -moz-transform: rotate(-6deg) scale(1.1);
    -ms-transform: rotate(-6deg) scale(1.1);
    -o-transform: rotate(-6deg) scale(1.1);
    transform: rotate(-6deg) scale(1.1);
    box-shadow: -2px 15px 50px -20px rgba(0, 0, 0, 0.4); }

.item-image {
  text-align: center;
  height: 100%;
  width: 100%;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover; }
  .item-image img {
    height: auto;
    width: 100%; }

/*================================================
EDIT PAGE
================================================*/
.edit-page #content {
  height: auto; }

.edit-page .item-frame {
  display: inline-block; }

.edit-page p {
  margin: -20px 0 0 0; }

.edit-page .section {
  margin: 0 -15px -15px;
  padding: 15px;
  border-radius: 6px;
  height: calc(100% - 230px); }
  .edit-page .section .line-title:first-of-type {
    margin-top: -15px; }
    .edit-page .section .line-title:first-of-type + div {
      padding: 10px 0 25px; }

.edit-page .mCSB_scrollTools .mCSB_draggerContainer {
  top: 95px;
  bottom: 15px; }

.edit-page .mCSB_container_wrapper {
  margin-right: 0; }

.mini-preview {
  overflow: visible;
  padding: 30px 0; }
  .mini-preview > * {
    vertical-align: middle; }

#mini-text .item-image {
  font-size: 8px;
  text-align: left; }

#mini-result .item-image canvas {
  height: auto;
  width: 100%; }

.symb {
  display: inline-block;
  position: relative;
  height: 90px;
  width: 80px; }
  .symb img {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%); }

#input-text {
  font-size: 20px;
  background-color: #ffffff;
  width: 50%;
  float: left;
  min-height: 154px;
  padding: 10px;
  border-radius: 6px;
  outline: none !important;
  box-sizing: border-box; }
  #input-text + div {
    font-family: sans-serif;
    font-size: 14px;
    float: left;
    width: 50%;
    padding: 0 15px;
    box-sizing: border-box; }
    #input-text + div * {
      box-sizing: border-box; }
    #input-text + div label {
      display: block;
      margin: 10px 0 2px; }
    #input-text + div > div:first-child label {
      margin-top: 0; }
    #input-text + div input, #input-text + div select {
      width: 100%;
      border: none;
      padding: 5px 7px;
      border-radius: 6px; }

@media (max-width: 767px) {
  #mini-image, #mini-text, .symb {
    display: none; }
  #input-text {
    margin-bottom: 15px; }
    #input-text, #input-text + div {
      float: none;
      width: auto; }
    #input-text + div {
      padding: 0; } }

/*================================================
SCROLLBAR FIXES
================================================*/
.mCSB_container_wrapper > .mCSB_container {
  padding: 0; }

#page-wrap:not(.edit-page) .mCSB_container_wrapper {
  border: 1px solid #d6d6d6; }
  #page-wrap:not(.edit-page) .mCSB_container_wrapper::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    height: 75px;
    width: 100%;
    background-image: -webkit-linear-gradient( bottom , rgba(0, 0, 0, 0.1) 0%, transparent 100%);
    background-image: linear-gradient(to top, rgba(0, 0, 0, 0.1) 0%, transparent 100%);
    z-index: 10; }

.mCSB_scrollTools {
  opacity: 1; }

.mCS-inset-2-dark.mCSB_scrollTools .mCSB_draggerRail, .mCS-inset-2.mCSB_scrollTools .mCSB_draggerRail, .mCS-inset-3-dark.mCSB_scrollTools .mCSB_draggerRail, .mCS-inset-3.mCSB_scrollTools .mCSB_draggerRail, .mCS-inset-dark.mCSB_scrollTools .mCSB_draggerRail, .mCS-inset.mCSB_scrollTools .mCSB_draggerRail {
  width: 8px;
  border-radius: 2px; }

.mCS-inset-2-dark.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar, .mCS-inset-3-dark.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar, .mCS-inset-dark.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar {
  background-color: #7d7d7d; }

.mCS-inset-2-dark.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar, .mCS-inset-2.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar, .mCS-inset-3-dark.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar, .mCS-inset-3.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar, .mCS-inset-dark.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar, .mCS-inset.mCSB_scrollTools .mCSB_dragger .mCSB_dragger_bar {
  width: 2px;
  margin: 3px 7px; }

.mCS-inset-2-dark.mCSB_scrollTools .mCSB_draggerRail {
  border-color: #e4e4e4; }

/*================================================
PREVIEW IMAGE
================================================*/
#preview {
  position: relative;
  height: auto;
  width: 800px;
  max-width: 100%; }
  #preview .pr-body {
    overflow: hidden;
    height: auto;
    width: 100%;
    position: relative; }
    #preview .pr-body::before {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5); }

#pr-image {
  height: auto;
  width: 100%; }

#pr-text {
  font-family: sans-serif;
  font-size: 20px;
  position: absolute;
  top: 17%;
  left: 50%;
  height: 66%;
  width: 42%;
  overflow: hidden;
  -webkit-transform: rotate(0deg);
  -moz-transform: rotate(0deg);
  -ms-transform: rotate(0deg);
  -o-transform: rotate(0deg);
  transform: rotate(0deg); }

.pr-modal {
  visibility: hidden;
  opacity: 0;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 20;
  -webkit-transition: all 0.4s ease;
  -moz-transition: all 0.4s ease;
  transition: all 0.4s ease; }
  .pr-modal.shown {
    visibility: visible;
    opacity: 1; }
  .pr-modal .pr-body {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    background-color: #fff;
    width: 100%;
    max-width: 600px;
    max-height: calc(100vh - 40px);
    padding: 15px;
    overflow: hidden;
    box-sizing: border-box;
    border-radius: 6px; }
    .pr-modal .pr-body canvas {
      width: 100%;
      height: auto; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
