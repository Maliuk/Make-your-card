'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageItem = function () {
    function ImageItem(url) {
        var textW = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
        var textH = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
        var top = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var left = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var rotate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var text = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";

        _classCallCheck(this, ImageItem);

        this.url = url;
        this.text = text;
        this.textW = textW;
        this.textH = textH;
        this.top = top;
        this.left = left;
        this.rotate = rotate;
    }

    _createClass(ImageItem, [{
        key: 'appendToDomElement',
        value: function appendToDomElement() {
            var html = '<div class="pr-body">' + '<img id="pr-image" src="' + this.url + '" />' + '<div id="pr-text">' + this.text + '</div>' + '</div>';
            $('#preview').html(html);

            $('#pr-text').css({
                'width': this.textW,
                'height': this.textH,
                'top': this.top,
                'left': this.left,
                '-webkit-transform': 'rotate(' + this.rotate + ')',
                '-moz-transform': 'rotate(' + this.rotate + ')',
                '-ms-transform': 'rotate(' + this.rotate + ')',
                '-o-transform': 'rotate(' + this.rotate + ')',
                'transform': 'rotate(' + this.rotate + ')'
            });
            $('#mini-image img, #mini-result img').attr('src', this.url);
        }
    }, {
        key: 'setText',
        value: function setText() {
            var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            this.text = text;
            $('#pr-text').html(this.text);
        }
    }, {
        key: 'getText',
        value: function getText() {
            return this.text;
        }
    }, {
        key: 'saveImage',
        value: function saveImage() {
            var link = void 0;
            if (!$('a').is('#download')) {
                link = document.createElement('a');
                link.innerHTML = 'download image';
                link.id = 'download';
                link.download = "noname.png";
                document.body.appendChild(link);
            } else {
                link = $('a#download').get(0);
            }

            if (!$("div").is("#preview")) return;
            html2canvas($("#preview"), {
                onrendered: function onrendered(canvas) {
                    //document.body.appendChild(canvas);
                    //link.href = canvas.toDataURL();
                    $(link).attr('href', canvas.toDataURL());
                    link.click();
                }
            });
        }
    }, {
        key: 'shareFB',
        value: function shareFB() {
            html2canvas($("#preview"), {
                onrendered: function onrendered(canvas) {
                    var data = canvas.toDataURL('image/png');
                    try {
                        var blob = dataURItoBlob(data);
                    } catch (e) {
                        console.log(e);
                    }
                    FB.getLoginStatus(function (response) {
                        console.log(response);
                        if (response.status === "connected") {
                            postImageToFacebook(response.authResponse.accessToken, "Canvas to Facebook", "image/png", blob, "http://bit.ly/1QK0Qbsz");
                        } else if (response.status === "not_authorized") {
                            FB.login(function (response) {
                                postImageToFacebook(response.authResponse.accessToken, "Canvas to Facebook", "image/png", blob, "http://bit.ly/1QK0Qbsz");
                            }, { scope: "publish_actions" });
                        } else {
                            FB.login(function (response) {
                                postImageToFacebook(response.authResponse.accessToken, "Canvas to Facebook", "image/png", blob, "http://bit.ly/1QK0Qbsz");
                            }, { scope: "publish_actions" });
                        }
                    });
                }
            });
        }
    }]);

    return ImageItem;
}();

function postImageToFacebook(token, filename, mimeType, imageData, message) {
    var fd = new FormData();
    fd.append("access_token", token);
    fd.append("source", imageData);
    fd.append("no_story", true);

    $('.preloader').removeClass('disable');

    // Upload image to facebook without story(post to feed)
    $.ajax({
        url: "https://graph.facebook.com/me/photos?access_token=" + token,
        type: "POST",
        data: fd,
        processData: false,
        contentType: false,
        cache: false,
        success: function success(data) {
            console.log("success: ", data);
            // Get image source url
            FB.api("/" + data.id + "?fields=images", function (response) {
                if (response && !response.error) {
                    //console.log(response.images[0].source);
                    // Create facebook post using image
                    FB.api("/me/feed", "POST", {
                        "message": "",
                        "picture": response.images[0].source,
                        "link": response.images[0].source,
                        "name": 'Try to do the same',
                        "description": message,
                        "privacy": {
                            value: 'SELF'
                        }
                    }, function (response) {
                        if (response && !response.error) {
                            /* handle the result */
                            console.log("Posted story to facebook");
                            console.log(response);
                            $('.preloader').addClass('disable');

                            $('.pr-modal .pr-body').html('<h2 class="text-center">Shared on facebook</h2>');
                            $('.pr-modal').addClass('shown');
                        }
                    });
                }
            });
        },
        error: function error(shr, status, data) {
            console.log("error " + data + " Status " + shr.status);
        },
        complete: function complete(data) {
            console.log('Post to facebook Complete');
        }
    });
}

function dataURItoBlob(dataURI) {
    // convert base64/URLEncoded data component to raw binary data held in a string
    var byteString;
    if (dataURI.split(',')[0].indexOf('base64') >= 0) byteString = atob(dataURI.split(',')[1]);else byteString = unescape(dataURI.split(',')[1]);

    // separate out the mime component
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

    // write the bytes of the string to a typed array
    var ia = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }

    return new Blob([ia], { type: mimeString });
}

var Main = function () {
    function Main() {
        _classCallCheck(this, Main);

        this.image;

        this.windowLoad();
        this.editPageEvents();
        this.saveImage();
        this.shareImage();
    }

    _createClass(Main, [{
        key: 'windowLoad',
        value: function windowLoad() {
            $('.items .item-image').each(function () {
                var imgSrc = $('img', this).attr('src');
                if (imgSrc) {
                    $(this).css('background-image', 'url("' + imgSrc + '")');
                    $('img', this).remove();
                }
            });

            $(window).load(function () {
                $(".scrollbar").mCustomScrollbar({
                    axis: "xy",
                    theme: "inset-2-dark"
                });

                $('.preloader').addClass('disable');
            });

            $('.items .item-frame').click(function (e) {
                e.preventDefault();

                var image = {
                    url: $(this).data('url'),
                    textWidth: $(this).data('text-width'),
                    textHeight: $(this).data('text-height'),
                    top: $(this).data('top'),
                    left: $(this).data('left'),
                    rotate: $(this).data('rotate')
                };

                try {
                    sessionStorage.setItem('image', JSON.stringify(image));
                    window.location = "/edit.html";
                } catch (ex) {
                    console.log(ex);
                }
            });
        }
    }, {
        key: 'editPageEvents',
        value: function editPageEvents() {
            var timeOutId = null;

            var previewUpdate = function previewUpdate() {
                if (timeOutId) clearTimeout(timeOutId);

                timeOutId = setTimeout(function () {
                    html2canvas($("#preview"), {
                        onrendered: function onrendered(canvas) {
                            //document.body.appendChild(canvas);
                            $('#mini-result .item-image').html(canvas);
                        }
                    });
                }, 1000);
            };

            if (window.location.toString().indexOf('edit.html') > -1 && !sessionStorage.getItem('image')) {
                window.location = "/";
            }

            if ($("div").is("#preview") && sessionStorage.getItem('image')) {
                var image = JSON.parse(sessionStorage.getItem('image'));
                var imgObj = new ImageItem(image.url, image.textWidth, image.textHeight, image.top, image.left, image.rotate);
                this.image = imgObj;
                imgObj.appendToDomElement();

                $('#input-text').on("keyup", function () {
                    $('#mini-text .item-image').html($(this).html());
                    imgObj.setText($(this).html());

                    previewUpdate();
                });

                $('#input-text').keydown(function (e) {
                    // trap the return key being pressed
                    if (e.keyCode === 13) {
                        // insert 2 br tags (if only one br tag is inserted the cursor won't go to the next line)
                        document.execCommand('insertHTML', false, '<br><br>');
                        // prevent the default behaviour of return key pressed
                        return false;
                    }
                });

                $('#input-text, #pr-text, #mini-text').css('font-family', $('#select-font').val());
                $('#select-font').on("change", function () {
                    $('#input-text, #pr-text, #mini-text').css('font-family', $(this).val());
                    previewUpdate();
                });

                $('#font-size').on("change", function () {
                    $('#input-text, #pr-text').css('font-size', $(this).val() + 'px');
                    previewUpdate();
                });

                var picker = new CP(document.querySelector('input#font-color'));
                picker.on("change", function (color) {
                    this.target.value = '#' + color;
                    $('#input-text, #pr-text, #mini-text').css('color', '#' + color);
                    previewUpdate();
                });

                $('#mini-result').click(function () {
                    html2canvas($("#preview"), {
                        onrendered: function onrendered(canvas) {
                            //document.body.appendChild(canvas);
                            $('.pr-modal .pr-body').html(canvas);
                            $('.pr-modal').addClass('shown');
                        }
                    });
                });

                $('.pr-modal').click(function () {
                    $(this).removeClass('shown');
                });
            }
        }
    }, {
        key: 'saveImage',
        value: function saveImage() {
            var _this = this;
            if (this.image) {
                $('#btn-download').on("click", function (e) {
                    e.preventDefault();
                    _this.image.saveImage();
                });
            }
        }
    }, {
        key: 'shareImage',
        value: function shareImage() {
            var _this = this;
            if (this.image) {
                $('#btn-poster').on("click", function (e) {
                    e.preventDefault();
                    _this.image.shareFB();
                });
            }
        }
    }]);

    return Main;
}();

$.noConflict();
window.$ = jQuery;
jQuery(document).ready(function ($) {
    new Main();

    window.fbAsyncInit = function () {
        FB.init({
            appId: '1328361773895736',
            status: true,
            cookie: true,
            xfbml: true,
            channelUrl: '//demo.yoursites.online',
            version: 'v2.8'
        });
    };

    (function (d, s, id) {
        var js,
            fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {
            return;
        }
        js = d.createElement(s);js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    })(document, 'script', 'facebook-jssdk');
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
