"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageItem = function () {
    function ImageItem(url) {
        var textW = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
        var textH = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
        var textAngle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var text = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";

        _classCallCheck(this, ImageItem);

        this.url = url;
        this.text = text;
    }

    _createClass(ImageItem, [{
        key: "toDomElement",
        value: function toDomElement() {}
    }, {
        key: "setText",
        value: function setText() {
            var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            this.text = text;
        }
    }, {
        key: "getText",
        value: function getText() {
            return this.text;
        }
    }]);

    return ImageItem;
}();

var Main = function Main() {
    _classCallCheck(this, Main);

    this.page = 0;
    this.images = new Array();
};

$.noConflict();
jQuery(document).ready(function ($) {

    $('.item-image').each(function () {
        var imgSrc = $('img', this).attr('src');
        if (imgSrc) {
            $(this).css('background-image', 'url("' + imgSrc + '")');
            $('img', this).remove();
        }
    });

    $(window).load(function () {
        $('.items .item-frame').each(function (i) {
            var _this = this;
            setTimeout(function () {
                $(_this).addClass('animate');
            }, i * 50);
        });

        $(".scrollbar").mCustomScrollbar({
            axis: "xy",
            theme: "inset-2-dark"
        });

        $('.items .item-frame').click(function (e) {
            e.preventDefault();

            try {
                sessionStorage.setItem('test', 'test');
                window.location = "/edit.html";
            } catch (ex) {
                console.log(ex);
            }
        });
    });

    $('body').on("click", function () {
        return;
        /*var node = document.getElementById('content');
          node = document.body;
          domtoimage.toPng(node)
            .then(function (dataUrl) {
                var img = new Image();
                img.src = dataUrl;
                document.body.appendChild(img);
            })
            .catch(function (error) {
                console.error('oops, something went wrong!', error);
            });*/

        if (!$("div").is("#preview")) return;
        html2canvas($("#preview"), {
            onrendered: function onrendered(canvas) {
                document.body.appendChild(canvas);

                // Convert and download as image
                //Canvas2Image.saveAsPNG(canvas);
                //$("#img-out").append(canvas);
                // Clean up
                //document.body.removeChild(canvas);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltYWdlLmpzIiwibWFpbi5qcyIsImFwcC5qcyJdLCJuYW1lcyI6WyJJbWFnZUl0ZW0iLCJ1cmwiLCJ0ZXh0VyIsInRleHRIIiwidGV4dEFuZ2xlIiwidGV4dCIsIk1haW4iLCJwYWdlIiwiaW1hZ2VzIiwiQXJyYXkiLCIkIiwibm9Db25mbGljdCIsImpRdWVyeSIsImRvY3VtZW50IiwicmVhZHkiLCJlYWNoIiwiaW1nU3JjIiwiYXR0ciIsImNzcyIsInJlbW92ZSIsIndpbmRvdyIsImxvYWQiLCJpIiwiX3RoaXMiLCJzZXRUaW1lb3V0IiwiYWRkQ2xhc3MiLCJtQ3VzdG9tU2Nyb2xsYmFyIiwiYXhpcyIsInRoZW1lIiwiY2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJsb2NhdGlvbiIsImV4IiwiY29uc29sZSIsImxvZyIsIm9uIiwiaXMiLCJodG1sMmNhbnZhcyIsIm9ucmVuZGVyZWQiLCJjYW52YXMiLCJib2R5IiwiYXBwZW5kQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUFBQSxTO0FBRUEsdUJBQUFDLEdBQUEsRUFBQTtBQUFBLFlBQUFDLEtBQUEsdUVBQUEsR0FBQTtBQUFBLFlBQUFDLEtBQUEsdUVBQUEsR0FBQTtBQUFBLFlBQUFDLFNBQUEsdUVBQUEsQ0FBQTtBQUFBLFlBQUFDLElBQUEsdUVBQUEsRUFBQTs7QUFBQTs7QUFDQSxhQUFBSixHQUFBLEdBQUFBLEdBQUE7QUFDQSxhQUFBSSxJQUFBLEdBQUFBLElBQUE7QUFDQTs7Ozt1Q0FFQSxDQUVBOzs7a0NBRUE7QUFBQSxnQkFBQUEsSUFBQSx1RUFBQSxFQUFBOztBQUNBLGlCQUFBQSxJQUFBLEdBQUFBLElBQUE7QUFDQTs7O2tDQUVBO0FBQ0EsbUJBQUEsS0FBQUEsSUFBQTtBQUNBOzs7Ozs7SUNqQkFDLEksR0FDQSxnQkFBQTtBQUFBOztBQUNBLFNBQUFDLElBQUEsR0FBQSxDQUFBO0FBQ0EsU0FBQUMsTUFBQSxHQUFBLElBQUFDLEtBQUEsRUFBQTtBQUNBLEM7O0FDSkFDLEVBQUFDLFVBQUE7QUFDQUMsT0FBQUMsUUFBQSxFQUFBQyxLQUFBLENBQUEsVUFBQUosQ0FBQSxFQUFBOztBQUVBQSxNQUFBLGFBQUEsRUFBQUssSUFBQSxDQUFBLFlBQUE7QUFDQSxZQUFBQyxTQUFBTixFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUFPLElBQUEsQ0FBQSxLQUFBLENBQUE7QUFDQSxZQUFBRCxNQUFBLEVBQUE7QUFDQU4sY0FBQSxJQUFBLEVBQUFRLEdBQUEsQ0FBQSxrQkFBQSxFQUFBLFVBQUFGLE1BQUEsR0FBQSxJQUFBO0FBQ0FOLGNBQUEsS0FBQSxFQUFBLElBQUEsRUFBQVMsTUFBQTtBQUNBO0FBQ0EsS0FOQTs7QUFRQVQsTUFBQVUsTUFBQSxFQUFBQyxJQUFBLENBQUEsWUFBQTtBQUNBWCxVQUFBLG9CQUFBLEVBQUFLLElBQUEsQ0FBQSxVQUFBTyxDQUFBLEVBQUE7QUFDQSxnQkFBQUMsUUFBQSxJQUFBO0FBQ0FDLHVCQUFBLFlBQUE7QUFDQWQsa0JBQUFhLEtBQUEsRUFBQUUsUUFBQSxDQUFBLFNBQUE7QUFDQSxhQUZBLEVBRUFILElBQUEsRUFGQTtBQUdBLFNBTEE7O0FBUUFaLFVBQUEsWUFBQSxFQUFBZ0IsZ0JBQUEsQ0FBQTtBQUNBQyxrQkFBQSxJQURBO0FBRUFDLG1CQUFBO0FBRkEsU0FBQTs7QUFLQWxCLFVBQUEsb0JBQUEsRUFBQW1CLEtBQUEsQ0FBQSxVQUFBQyxDQUFBLEVBQUE7QUFDQUEsY0FBQUMsY0FBQTs7QUFFQSxnQkFBQTtBQUNBQywrQkFBQUMsT0FBQSxDQUFBLE1BQUEsRUFBQSxNQUFBO0FBQ0FiLHVCQUFBYyxRQUFBLEdBQUEsWUFBQTtBQUNBLGFBSEEsQ0FJQSxPQUFBQyxFQUFBLEVBQUE7QUFDQUMsd0JBQUFDLEdBQUEsQ0FBQUYsRUFBQTtBQUNBO0FBRUEsU0FYQTtBQVlBLEtBMUJBOztBQThCQXpCLE1BQUEsTUFBQSxFQUFBNEIsRUFBQSxDQUFBLE9BQUEsRUFBQSxZQUFBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FBZUEsWUFBQSxDQUFBNUIsRUFBQSxLQUFBLEVBQUE2QixFQUFBLENBQUEsVUFBQSxDQUFBLEVBQ0E7QUFDQUMsb0JBQUE5QixFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0ErQix3QkFBQSxvQkFBQUMsTUFBQSxFQUFBO0FBQ0E3Qix5QkFBQThCLElBQUEsQ0FBQUMsV0FBQSxDQUFBRixNQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBLFNBQUE7QUFXQSxLQTlCQTtBQWdDQSxDQXhFQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSW1hZ2VJdGVtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIHRleHRXID0gMTAwLCB0ZXh0SCA9IDEwMCwgdGV4dEFuZ2xlID0gMCwgdGV4dCA9IFwiXCIpIHtcclxuICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHRvRG9tRWxlbWVudCgpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBzZXRUZXh0KHRleHQgPSBcIlwiKSB7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHQ7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBNYWluIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucGFnZSA9IDA7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgIH1cclxufSIsIiQubm9Db25mbGljdCgpO1xyXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgkKSB7XHJcblxyXG4gICAgJCgnLml0ZW0taW1hZ2UnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW1nU3JjID0gJCgnaW1nJywgdGhpcykuYXR0cignc3JjJyk7XHJcbiAgICAgICAgaWYgKGltZ1NyYykge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoXCInICsgaW1nU3JjICsgJ1wiKScpO1xyXG4gICAgICAgICAgICAkKCdpbWcnLCB0aGlzKS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKHdpbmRvdykubG9hZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCgnLml0ZW1zIC5pdGVtLWZyYW1lJykuZWFjaChmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQoX3RoaXMpLmFkZENsYXNzKCdhbmltYXRlJyk7XHJcbiAgICAgICAgICAgIH0sIGkgKiA1MCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAkKFwiLnNjcm9sbGJhclwiKS5tQ3VzdG9tU2Nyb2xsYmFyKHtcclxuICAgICAgICAgICAgYXhpczpcInh5XCIsXHJcbiAgICAgICAgICAgIHRoZW1lOiBcImluc2V0LTItZGFya1wiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJy5pdGVtcyAuaXRlbS1mcmFtZScpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd0ZXN0JywgJ3Rlc3QnKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IFwiL2VkaXQuaHRtbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAkKCdib2R5Jykub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8qdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpO1xyXG5cclxuICAgICAgICBub2RlID0gZG9jdW1lbnQuYm9keTtcclxuXHJcbiAgICAgICAgZG9tdG9pbWFnZS50b1BuZyhub2RlKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IGRhdGFVcmw7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGltZyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ29vcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nIScsIGVycm9yKTtcclxuICAgICAgICAgICAgfSk7Ki9cclxuXHJcblxyXG4gICAgICAgIGlmICghJChcImRpdlwiKS5pcyhcIiNwcmV2aWV3XCIpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaHRtbDJjYW52YXMoJChcIiNwcmV2aWV3XCIpLCB7XHJcbiAgICAgICAgICAgIG9ucmVuZGVyZWQ6IGZ1bmN0aW9uKGNhbnZhcykge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgYW5kIGRvd25sb2FkIGFzIGltYWdlXHJcbiAgICAgICAgICAgICAgICAvL0NhbnZhczJJbWFnZS5zYXZlQXNQTkcoY2FudmFzKTtcclxuICAgICAgICAgICAgICAgIC8vJChcIiNpbWctb3V0XCIpLmFwcGVuZChjYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcclxuICAgICAgICAgICAgICAgIC8vZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjYW52YXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbn0pOyJdfQ==
