'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageItem = function () {
    function ImageItem(url) {
        var textW = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
        var textH = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
        var top = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var left = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var rotate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var text = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";

        _classCallCheck(this, ImageItem);

        this.url = url;
        this.text = text;
        this.textW = textW;
        this.textH = textH;
        this.top = top;
        this.left = left;
        this.rotate = rotate;
    }

    _createClass(ImageItem, [{
        key: 'appendToDomElement',
        value: function appendToDomElement() {
            var html = '<div class="pr-body">' + '<img id="pr-image" src="' + this.url + '" />' + '<div id="pr-text">' + this.text + '</div>' + '</div>';
            $('#preview').html(html);

            $('#pr-text').css({
                'width': this.textW,
                'height': this.textH,
                'top': this.top,
                'left': this.left,
                '-webkit-transform': 'rotate(' + this.rotate + ')',
                '-moz-transform': 'rotate(' + this.rotate + ')',
                '-ms-transform': 'rotate(' + this.rotate + ')',
                '-o-transform': 'rotate(' + this.rotate + ')',
                'transform': 'rotate(' + this.rotate + ')'
            });
            $('#mini-image img, #mini-result img').attr('src', this.url);
        }
    }, {
        key: 'setText',
        value: function setText() {
            var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

            this.text = text;
            $('#pr-text').html(this.text);
        }
    }, {
        key: 'getText',
        value: function getText() {
            return this.text;
        }
    }, {
        key: 'saveImage',
        value: function saveImage() {
            var link = void 0;
            if (!$('a').is('#download')) {
                link = document.createElement('a');
                link.innerHTML = 'download image';
                link.id = 'download';
                link.download = "noname.png";
                document.body.appendChild(link);
            } else {
                link = $('a#download').get(0);
            }

            if (!$("div").is("#preview")) return;
            html2canvas($("#preview"), {
                onrendered: function onrendered(canvas) {
                    //document.body.appendChild(canvas);
                    //link.href = canvas.toDataURL();
                    $(link).attr('href', canvas.toDataURL());
                    link.click();
                }
            });
        }
    }]);

    return ImageItem;
}();

var Main = function () {
    function Main() {
        _classCallCheck(this, Main);

        this.image;

        this.windowLoad();
        this.editPageEvants();
        this.saveImage();
    }

    _createClass(Main, [{
        key: 'windowLoad',
        value: function windowLoad() {
            $('.items .item-image').each(function () {
                var imgSrc = $('img', this).attr('src');
                if (imgSrc) {
                    $(this).css('background-image', 'url("' + imgSrc + '")');
                    $('img', this).remove();
                }
            });

            $(window).load(function () {
                $(".scrollbar").mCustomScrollbar({
                    axis: "xy",
                    theme: "inset-2-dark"
                });
            });

            $('.items .item-frame').click(function (e) {
                e.preventDefault();

                var image = {
                    url: $(this).data('url'),
                    textWidth: $(this).data('text-width'),
                    textHeight: $(this).data('text-height'),
                    top: $(this).data('top'),
                    left: $(this).data('left'),
                    rotate: $(this).data('rotate')
                };

                try {
                    sessionStorage.setItem('image', JSON.stringify(image));
                    window.location = "/edit.html";
                } catch (ex) {
                    console.log(ex);
                }
            });
        }
    }, {
        key: 'editPageEvants',
        value: function editPageEvants() {
            var timeOutId = null;

            var previewUpdate = function previewUpdate() {
                if (timeOutId) clearTimeout(timeOutId);

                timeOutId = setTimeout(function () {
                    html2canvas($("#preview"), {
                        onrendered: function onrendered(canvas) {
                            //document.body.appendChild(canvas);
                            $('#mini-result .item-image').html(canvas);
                        }
                    });
                }, 1000);
            };

            if (window.location.toString().indexOf('edit.html') > -1 && !sessionStorage.getItem('image')) {
                window.location = "/";
            }

            if ($("div").is("#preview") && sessionStorage.getItem('image')) {
                var image = JSON.parse(sessionStorage.getItem('image'));
                var imgObj = new ImageItem(image.url, image.textWidth, image.textHeight, image.top, image.left, image.rotate);
                this.image = imgObj;
                imgObj.appendToDomElement();

                $('#input-text').on("keyup", function () {
                    $('#mini-text .item-image').html($(this).html());
                    imgObj.setText($(this).html());

                    previewUpdate();
                });

                $('#input-text').keydown(function (e) {
                    // trap the return key being pressed
                    if (e.keyCode === 13) {
                        // insert 2 br tags (if only one br tag is inserted the cursor won't go to the next line)
                        document.execCommand('insertHTML', false, '<br><br>');
                        // prevent the default behaviour of return key pressed
                        return false;
                    }
                });

                $('#input-text, #pr-text').css('font-family', $('#select-font').val());
                $('#select-font').on("change", function () {
                    $('#input-text, #pr-text').css('font-family', $(this).val());
                    previewUpdate();
                });

                $('#font-size').on("change", function () {
                    $('#input-text, #pr-text').css('font-size', $(this).val() + 'px');
                    previewUpdate();
                });

                var picker = new CP(document.querySelector('input#font-color'));
                picker.on("change", function (color) {
                    this.target.value = '#' + color;
                    $('#input-text, #pr-text').css('color', '#' + color);
                    previewUpdate();
                });

                $('#mini-result').click(function () {
                    html2canvas($("#preview"), {
                        onrendered: function onrendered(canvas) {
                            //document.body.appendChild(canvas);
                            $('.pr-modal .pr-body').html(canvas);
                            $('.pr-modal').addClass('shown');
                        }
                    });
                });

                $('.pr-modal').click(function () {
                    $(this).removeClass('shown');
                });
            }
        }
    }, {
        key: 'saveImage',
        value: function saveImage() {
            var _this = this;
            if (this.image) {
                $('#btn-download').on("click", function (e) {
                    e.preventDefault();
                    _this.image.saveImage();
                });
            }
        }
    }]);

    return Main;
}();

$.noConflict();
window.$ = jQuery;
jQuery(document).ready(function ($) {
    new Main();

    $.ajaxSetup({
        cache: true
    });
    $.getScript('//connect.facebook.net/en_UK/all.js', function () {
        // Load the APP / SDK
        FB.init({
            appId: '288585397909199', // App ID from the App Dashboard
            cookie: true, // set sessions cookies to allow your server to access the session?
            xfbml: true, // parse XFBML tags on this page?
            frictionlessRequests: true,
            oauth: true
        });
        FB.login(function (response) {
            if (response.authResponse) {
                window.authToken = response.authResponse.accessToken;
            } else {}
        }, {
            scope: 'publish_actions,publish_stream'
        });
    });
});

function PostImageToFacebook(authToken) {
    var canvas = document.getElementById("c");
    var imageData = canvas.toDataURL("image/png");
    try {
        blob = dataURItoBlob(imageData);
    } catch (e) {
        console.log(e);
    }
    var fd = new FormData();
    fd.append("access_token", authToken);
    fd.append("source", blob);
    fd.append("message", "Photo Text");
    try {
        $.ajax({
            url: "https://graph.facebook.com/me/photos?access_token=" + authToken,
            type: "POST",
            data: fd,
            processData: false,
            contentType: false,
            cache: false,
            success: function success(data) {
                console.log("success " + data);
                $("#poster").html("Posted Canvas Successfully");
            },
            error: function error(shr, status, data) {
                console.log("error " + data + " Status " + shr.status);
            },
            complete: function complete() {
                console.log("Posted to facebook");
            }
        });
    } catch (e) {
        console.log(e);
    }
}

// Convert a data URI to blob
function dataURItoBlob(dataURI) {
    var byteString = atob(dataURI.split(',')[1]);
    var ab = new ArrayBuffer(byteString.length);
    var ia = new Uint8Array(ab);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], {
        type: 'image/png'
    });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltYWdlLmpzIiwibWFpbi5qcyIsImFwcC5qcyJdLCJuYW1lcyI6WyJJbWFnZUl0ZW0iLCJ1cmwiLCJ0ZXh0VyIsInRleHRIIiwidG9wIiwibGVmdCIsInJvdGF0ZSIsInRleHQiLCJodG1sIiwiJCIsImNzcyIsImF0dHIiLCJsaW5rIiwiaXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJpZCIsImRvd25sb2FkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZ2V0IiwiaHRtbDJjYW52YXMiLCJvbnJlbmRlcmVkIiwiY2FudmFzIiwidG9EYXRhVVJMIiwiY2xpY2siLCJNYWluIiwiaW1hZ2UiLCJ3aW5kb3dMb2FkIiwiZWRpdFBhZ2VFdmFudHMiLCJzYXZlSW1hZ2UiLCJlYWNoIiwiaW1nU3JjIiwicmVtb3ZlIiwid2luZG93IiwibG9hZCIsIm1DdXN0b21TY3JvbGxiYXIiLCJheGlzIiwidGhlbWUiLCJlIiwicHJldmVudERlZmF1bHQiLCJkYXRhIiwidGV4dFdpZHRoIiwidGV4dEhlaWdodCIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2NhdGlvbiIsImV4IiwiY29uc29sZSIsImxvZyIsInRpbWVPdXRJZCIsInByZXZpZXdVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidG9TdHJpbmciLCJpbmRleE9mIiwiZ2V0SXRlbSIsInBhcnNlIiwiaW1nT2JqIiwiYXBwZW5kVG9Eb21FbGVtZW50Iiwib24iLCJzZXRUZXh0Iiwia2V5ZG93biIsImtleUNvZGUiLCJleGVjQ29tbWFuZCIsInZhbCIsInBpY2tlciIsIkNQIiwicXVlcnlTZWxlY3RvciIsImNvbG9yIiwidGFyZ2V0IiwidmFsdWUiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiX3RoaXMiLCJub0NvbmZsaWN0IiwialF1ZXJ5IiwicmVhZHkiLCJhamF4U2V0dXAiLCJjYWNoZSIsImdldFNjcmlwdCIsIkZCIiwiaW5pdCIsImFwcElkIiwiY29va2llIiwieGZibWwiLCJmcmljdGlvbmxlc3NSZXF1ZXN0cyIsIm9hdXRoIiwibG9naW4iLCJyZXNwb25zZSIsImF1dGhSZXNwb25zZSIsImF1dGhUb2tlbiIsImFjY2Vzc1Rva2VuIiwic2NvcGUiLCJQb3N0SW1hZ2VUb0ZhY2Vib29rIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbWFnZURhdGEiLCJibG9iIiwiZGF0YVVSSXRvQmxvYiIsImZkIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJhamF4IiwidHlwZSIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJzdWNjZXNzIiwiZXJyb3IiLCJzaHIiLCJzdGF0dXMiLCJjb21wbGV0ZSIsImRhdGFVUkkiLCJieXRlU3RyaW5nIiwiYXRvYiIsInNwbGl0IiwiYWIiLCJBcnJheUJ1ZmZlciIsImxlbmd0aCIsImlhIiwiVWludDhBcnJheSIsImkiLCJjaGFyQ29kZUF0IiwiQmxvYiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBQUFBLFM7QUFDQSx1QkFBQUMsR0FBQSxFQUFBO0FBQUEsWUFBQUMsS0FBQSx1RUFBQSxHQUFBO0FBQUEsWUFBQUMsS0FBQSx1RUFBQSxHQUFBO0FBQUEsWUFBQUMsR0FBQSx1RUFBQSxDQUFBO0FBQUEsWUFBQUMsSUFBQSx1RUFBQSxDQUFBO0FBQUEsWUFBQUMsTUFBQSx1RUFBQSxDQUFBO0FBQUEsWUFBQUMsSUFBQSx1RUFBQSxFQUFBOztBQUFBOztBQUNBLGFBQUFOLEdBQUEsR0FBQUEsR0FBQTtBQUNBLGFBQUFNLElBQUEsR0FBQUEsSUFBQTtBQUNBLGFBQUFMLEtBQUEsR0FBQUEsS0FBQTtBQUNBLGFBQUFDLEtBQUEsR0FBQUEsS0FBQTtBQUNBLGFBQUFDLEdBQUEsR0FBQUEsR0FBQTtBQUNBLGFBQUFDLElBQUEsR0FBQUEsSUFBQTtBQUNBLGFBQUFDLE1BQUEsR0FBQUEsTUFBQTtBQUNBOzs7OzZDQUVBO0FBQ0EsZ0JBQUFFLE9BQUEsMEJBQ0EsMEJBREEsR0FDQSxLQUFBUCxHQURBLEdBQ0EsTUFEQSxH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QUFHQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSW1hZ2VJdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKHVybCwgdGV4dFcgPSAxMDAsIHRleHRIID0gMTAwLCB0b3AgPSAwLCBsZWZ0ID0gMCwgcm90YXRlID0gMCwgdGV4dCA9IFwiXCIpIHtcclxuICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgICAgIHRoaXMudGV4dFcgPSB0ZXh0VztcclxuICAgICAgICB0aGlzLnRleHRIID0gdGV4dEg7XHJcbiAgICAgICAgdGhpcy50b3AgPSB0b3A7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuICAgICAgICB0aGlzLnJvdGF0ZSA9IHJvdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBhcHBlbmRUb0RvbUVsZW1lbnQoKSB7XHJcbiAgICAgICAgbGV0IGh0bWwgPSAnPGRpdiBjbGFzcz1cInByLWJvZHlcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGltZyBpZD1cInByLWltYWdlXCIgc3JjPVwiJysgdGhpcy51cmwgKydcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwicHItdGV4dFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dCArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICQoJyNwcmV2aWV3JykuaHRtbChodG1sKTtcclxuICAgICAgICBcclxuICAgICAgICAkKCcjcHItdGV4dCcpLmNzcyh7XHJcbiAgICAgICAgICAgICd3aWR0aCc6IHRoaXMudGV4dFcsXHJcbiAgICAgICAgICAgICdoZWlnaHQnOiB0aGlzLnRleHRILFxyXG4gICAgICAgICAgICAndG9wJzogdGhpcy50b3AsXHJcbiAgICAgICAgICAgICdsZWZ0JzogdGhpcy5sZWZ0LFxyXG4gICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAncm90YXRlKCcgKyB0aGlzLnJvdGF0ZSArICcpJyxcclxuICAgICAgICAgICAgJy1tb3otdHJhbnNmb3JtJzogJ3JvdGF0ZSgnICsgdGhpcy5yb3RhdGUgKyAnKScsXHJcbiAgICAgICAgICAgICctbXMtdHJhbnNmb3JtJzogJ3JvdGF0ZSgnICsgdGhpcy5yb3RhdGUgKyAnKScsXHJcbiAgICAgICAgICAgICctby10cmFuc2Zvcm0nOiAncm90YXRlKCcgKyB0aGlzLnJvdGF0ZSArICcpJyxcclxuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICdyb3RhdGUoJyArIHRoaXMucm90YXRlICsgJyknXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnI21pbmktaW1hZ2UgaW1nLCAjbWluaS1yZXN1bHQgaW1nJykuYXR0cignc3JjJywgdGhpcy51cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRleHQodGV4dCA9IFwiXCIpIHtcclxuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgICAgICQoJyNwci10ZXh0JykuaHRtbCh0aGlzLnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlSW1hZ2UoKSB7XHJcbiAgICAgICAgbGV0IGxpbms7XHJcbiAgICAgICAgaWYgKCEkKCdhJykuaXMoJyNkb3dubG9hZCcpKSB7XHJcbiAgICAgICAgICAgIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgICAgIGxpbmsuaW5uZXJIVE1MID0gJ2Rvd25sb2FkIGltYWdlJztcclxuICAgICAgICAgICAgbGluay5pZCA9ICdkb3dubG9hZCc7XHJcbiAgICAgICAgICAgIGxpbmsuZG93bmxvYWQgPSBcIm5vbmFtZS5wbmdcIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxpbmsgPSAkKCdhI2Rvd25sb2FkJykuZ2V0KDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEkKFwiZGl2XCIpLmlzKFwiI3ByZXZpZXdcIikpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBodG1sMmNhbnZhcygkKFwiI3ByZXZpZXdcIiksIHtcclxuICAgICAgICAgICAgb25yZW5kZXJlZDogZnVuY3Rpb24gKGNhbnZhcykge1xyXG4gICAgICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICAvL2xpbmsuaHJlZiA9IGNhbnZhcy50b0RhdGFVUkwoKTtcclxuICAgICAgICAgICAgICAgICQobGluaykuYXR0cignaHJlZicsIGNhbnZhcy50b0RhdGFVUkwoKSk7XHJcbiAgICAgICAgICAgICAgICBsaW5rLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImNsYXNzIE1haW4ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbWFnZTtcclxuXHJcbiAgICAgICAgdGhpcy53aW5kb3dMb2FkKCk7XHJcbiAgICAgICAgdGhpcy5lZGl0UGFnZUV2YW50cygpO1xyXG4gICAgICAgIHRoaXMuc2F2ZUltYWdlKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvd0xvYWQoKSB7XHJcbiAgICAgICAgJCgnLml0ZW1zIC5pdGVtLWltYWdlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpbWdTcmMgPSAkKCdpbWcnLCB0aGlzKS5hdHRyKCdzcmMnKTtcclxuICAgICAgICAgICAgaWYgKGltZ1NyYykge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKFwiJyArIGltZ1NyYyArICdcIiknKTtcclxuICAgICAgICAgICAgICAgICQoJ2ltZycsIHRoaXMpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJChcIi5zY3JvbGxiYXJcIikubUN1c3RvbVNjcm9sbGJhcih7XHJcbiAgICAgICAgICAgICAgICBheGlzOlwieHlcIixcclxuICAgICAgICAgICAgICAgIHRoZW1lOiBcImluc2V0LTItZGFya1wiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcuaXRlbXMgLml0ZW0tZnJhbWUnKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICQodGhpcykuZGF0YSgndXJsJyksXHJcbiAgICAgICAgICAgICAgICB0ZXh0V2lkdGg6ICQodGhpcykuZGF0YSgndGV4dC13aWR0aCcpLFxyXG4gICAgICAgICAgICAgICAgdGV4dEhlaWdodDogJCh0aGlzKS5kYXRhKCd0ZXh0LWhlaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAkKHRoaXMpLmRhdGEoJ3RvcCcpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogJCh0aGlzKS5kYXRhKCdsZWZ0JyksXHJcbiAgICAgICAgICAgICAgICByb3RhdGU6ICQodGhpcykuZGF0YSgncm90YXRlJylcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdpbWFnZScsIEpTT04uc3RyaW5naWZ5KGltYWdlKSk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBcIi9lZGl0Lmh0bWxcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGVkaXRQYWdlRXZhbnRzKCkge1xyXG4gICAgICAgIGxldCB0aW1lT3V0SWQgPSBudWxsO1xyXG5cclxuICAgICAgICBsZXQgcHJldmlld1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRpbWVPdXRJZClcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lT3V0SWQpO1xyXG5cclxuICAgICAgICAgICAgdGltZU91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sMmNhbnZhcygkKFwiI3ByZXZpZXdcIiksIHtcclxuICAgICAgICAgICAgICAgICAgICBvbnJlbmRlcmVkOiBmdW5jdGlvbihjYW52YXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNtaW5pLXJlc3VsdCAuaXRlbS1pbWFnZScpLmh0bWwoY2FudmFzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkuaW5kZXhPZignZWRpdC5odG1sJykgPiAtMSAmJiAhc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnaW1hZ2UnKSkge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBcIi9cIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkKFwiZGl2XCIpLmlzKFwiI3ByZXZpZXdcIikgJiYgc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnaW1hZ2UnKSkge1xyXG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2ltYWdlJykpO1xyXG4gICAgICAgICAgICB2YXIgaW1nT2JqID0gbmV3IEltYWdlSXRlbShpbWFnZS51cmwsIGltYWdlLnRleHRXaWR0aCwgaW1hZ2UudGV4dEhlaWdodCwgaW1hZ2UudG9wLCBpbWFnZS5sZWZ0LCBpbWFnZS5yb3RhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gaW1nT2JqO1xyXG4gICAgICAgICAgICBpbWdPYmouYXBwZW5kVG9Eb21FbGVtZW50KCk7XHJcblxyXG4gICAgICAgICAgICAkKCcjaW5wdXQtdGV4dCcpLm9uKFwia2V5dXBcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI21pbmktdGV4dCAuaXRlbS1pbWFnZScpLmh0bWwoJCh0aGlzKS5odG1sKCkpO1xyXG4gICAgICAgICAgICAgICAgaW1nT2JqLnNldFRleHQoJCh0aGlzKS5odG1sKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHByZXZpZXdVcGRhdGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKCcjaW5wdXQtdGV4dCcpLmtleWRvd24oZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdHJhcCB0aGUgcmV0dXJuIGtleSBiZWluZyBwcmVzc2VkXHJcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluc2VydCAyIGJyIHRhZ3MgKGlmIG9ubHkgb25lIGJyIHRhZyBpcyBpbnNlcnRlZCB0aGUgY3Vyc29yIHdvbid0IGdvIHRvIHRoZSBuZXh0IGxpbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2luc2VydEhUTUwnLCBmYWxzZSwgJzxicj48YnI+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCB0aGUgZGVmYXVsdCBiZWhhdmlvdXIgb2YgcmV0dXJuIGtleSBwcmVzc2VkXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoJyNpbnB1dC10ZXh0LCAjcHItdGV4dCcpLmNzcygnZm9udC1mYW1pbHknLCAkKCcjc2VsZWN0LWZvbnQnKS52YWwoKSk7XHJcbiAgICAgICAgICAgICQoJyNzZWxlY3QtZm9udCcpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQoJyNpbnB1dC10ZXh0LCAjcHItdGV4dCcpLmNzcygnZm9udC1mYW1pbHknLCAkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgIHByZXZpZXdVcGRhdGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKCcjZm9udC1zaXplJykub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI2lucHV0LXRleHQsICNwci10ZXh0JykuY3NzKCdmb250LXNpemUnLCAkKHRoaXMpLnZhbCgpICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgICAgICBwcmV2aWV3VXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBpY2tlciA9IG5ldyBDUChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCNmb250LWNvbG9yJykpO1xyXG4gICAgICAgICAgICBwaWNrZXIub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24oY29sb3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnZhbHVlID0gJyMnICsgY29sb3I7XHJcbiAgICAgICAgICAgICAgICAkKCcjaW5wdXQtdGV4dCwgI3ByLXRleHQnKS5jc3MoJ2NvbG9yJywgJyMnICsgY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgcHJldmlld1VwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoJyNtaW5pLXJlc3VsdCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwyY2FudmFzKCQoXCIjcHJldmlld1wiKSwge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ucmVuZGVyZWQ6IGZ1bmN0aW9uKGNhbnZhcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnByLW1vZGFsIC5wci1ib2R5JykuaHRtbChjYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcucHItbW9kYWwnKS5hZGRDbGFzcygnc2hvd24nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKCcucHItbW9kYWwnKS5jbGljayhmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3Nob3duJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzYXZlSW1hZ2UoKSB7XHJcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5pbWFnZSkge1xyXG4gICAgICAgICAgICAkKCcjYnRuLWRvd25sb2FkJykub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuaW1hZ2Uuc2F2ZUltYWdlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG59IiwiJC5ub0NvbmZsaWN0KCk7XHJcbndpbmRvdy4kID0galF1ZXJ5O1xyXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgkKSB7XHJcbiAgICBuZXcgTWFpbigpO1xyXG5cclxuXHJcbiAgICAkLmFqYXhTZXR1cCh7XHJcbiAgICAgICAgY2FjaGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgJC5nZXRTY3JpcHQoJy8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVUsvYWxsLmpzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIExvYWQgdGhlIEFQUCAvIFNES1xyXG4gICAgICAgIEZCLmluaXQoe1xyXG4gICAgICAgICAgICBhcHBJZDogJzI4ODU4NTM5NzkwOTE5OScsIC8vIEFwcCBJRCBmcm9tIHRoZSBBcHAgRGFzaGJvYXJkXHJcbiAgICAgICAgICAgIGNvb2tpZTogdHJ1ZSwgLy8gc2V0IHNlc3Npb25zIGNvb2tpZXMgdG8gYWxsb3cgeW91ciBzZXJ2ZXIgdG8gYWNjZXNzIHRoZSBzZXNzaW9uP1xyXG4gICAgICAgICAgICB4ZmJtbDogdHJ1ZSwgLy8gcGFyc2UgWEZCTUwgdGFncyBvbiB0aGlzIHBhZ2U/XHJcbiAgICAgICAgICAgIGZyaWN0aW9ubGVzc1JlcXVlc3RzOiB0cnVlLFxyXG4gICAgICAgICAgICBvYXV0aDogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIEZCLmxvZ2luKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuYXV0aFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuYXV0aFRva2VuID0gcmVzcG9uc2UuYXV0aFJlc3BvbnNlLmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBzY29wZTogJ3B1Ymxpc2hfYWN0aW9ucyxwdWJsaXNoX3N0cmVhbSdcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBQb3N0SW1hZ2VUb0ZhY2Vib29rKGF1dGhUb2tlbikge1xyXG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY1wiKTtcclxuICAgIHZhciBpbWFnZURhdGEgPSBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBibG9iID0gZGF0YVVSSXRvQmxvYihpbWFnZURhdGEpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgfVxyXG4gICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICBmZC5hcHBlbmQoXCJhY2Nlc3NfdG9rZW5cIiwgYXV0aFRva2VuKTtcclxuICAgIGZkLmFwcGVuZChcInNvdXJjZVwiLCBibG9iKTtcclxuICAgIGZkLmFwcGVuZChcIm1lc3NhZ2VcIiwgXCJQaG90byBUZXh0XCIpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWUvcGhvdG9zP2FjY2Vzc190b2tlbj1cIiArIGF1dGhUb2tlbixcclxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IGZkLFxyXG4gICAgICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcclxuICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdWNjZXNzIFwiICsgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3Bvc3RlclwiKS5odG1sKFwiUG9zdGVkIENhbnZhcyBTdWNjZXNzZnVsbHlcIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoc2hyLCBzdGF0dXMsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgXCIgKyBkYXRhICsgXCIgU3RhdHVzIFwiICsgc2hyLnN0YXR1cyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBvc3RlZCB0byBmYWNlYm9va1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ29udmVydCBhIGRhdGEgVVJJIHRvIGJsb2JcclxuZnVuY3Rpb24gZGF0YVVSSXRvQmxvYihkYXRhVVJJKSB7XHJcbiAgICB2YXIgYnl0ZVN0cmluZyA9IGF0b2IoZGF0YVVSSS5zcGxpdCgnLCcpWzFdKTtcclxuICAgIHZhciBhYiA9IG5ldyBBcnJheUJ1ZmZlcihieXRlU3RyaW5nLmxlbmd0aCk7XHJcbiAgICB2YXIgaWEgPSBuZXcgVWludDhBcnJheShhYik7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVTdHJpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpYVtpXSA9IGJ5dGVTdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgQmxvYihbYWJdLCB7XHJcbiAgICAgICAgdHlwZTogJ2ltYWdlL3BuZydcclxuICAgIH0pO1xyXG59Il19
